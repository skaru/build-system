function(register_component)
    set(options TYPE)
    set(oneValueArg)
    set(multiValueArg SRCS DEPS)
    cmake_parse_arguments(_ "${options}" "${oneValueArg}" "${multiValueArg}" ${ARGN})
    get_component_name(COMPONENT_NAME)
    has_kconfig(LINK ${COMPONENT_NAME})
    if(NOT _TYPE)
        set(_TYPE STATIC)
    endif()

    if(NOT LINK)
        return()
    endif()

    add_library(${COMPONENT_NAME} ${_TYPE} ${__SRCS})
    target_link_libraries(${CMAKE_PROJECT_NAME} PUBLIC ${COMPONENT_NAME})
    target_include_directories(${COMPONENT_NAME} PUBLIC include "${PROJECT_SOURCE_DIR}/build")

    foreach(component ${__DEPS})
        has_kconfig(LINK ${component})
        if(NOT LINK)
            continue()
        endif()
        target_link_libraries(${COMPONENT_NAME} PUBLIC ${component})
    endforeach()
endfunction()

function(get_component_name result)
    get_filename_component(COMPONENT_NAME ${CMAKE_CURRENT_SOURCE_DIR} NAME)
    string(REPLACE " " "_" COMPONENT_NAME ${COMPONENT_NAME})

    set (${result} ${COMPONENT_NAME} PARENT_SCOPE)
endfunction()

function(has_kconfig result component_name)
    string(TOUPPER ${component_name} CONFIG_NAME)
    if("CONFIG_${CONFIG_NAME}_ENABLE" IN_LIST CONFIGS_LIST)
        if("${CONFIG_${CONFIG_NAME}_ENABLE}" STREQUAL "y")
            set (${result} 1 PARENT_SCOPE)
        else()
            set (${result} 0 PARENT_SCOPE)
        endif()
    else()
        set (${result} 1 PARENT_SCOPE)
    endif()
endfunction()